names(df.t) <- c("Operator","Month","Average Uploadspeed(Kbps)")
kable(df.t, caption="Average upload speed(Kbps) per operator per month")
library(plyr)
# add month
df.4G$month <- format(as.Date(df.4G$test_date, "%Y-%m-%d"), "%m")
df.t<-ddply(df.4G,.(operator,month),summarize, mean_dwn=round(mean(download_kbps),1))
names(df.t) <- c("Operator","Month","Average Download speed(Kbps)")
kable(df.t, caption="Average download speed(Kbps) per operator per month")
```{r}
library(plyr)
# add month
df.4G$month <- format(as.Date(df.4G$test_date, "%Y-%m-%d"), "%m")
df.t<-ddply(df.4G,.(operator,month),summarize, mean_dwn=round(mean(download_kbps),1))
names(df.t) <- c("Operator","Month","Average Download speed(Kbps)")
kable(df.t, caption="Average download speed(Kbps) per operator per month")
library(plyr)
# add month
df.4G$month <- format(as.Date(df.4G$test_date, "%Y-%m-%d"), "%m")
df.t<-ddply(df.4G,.(operator,month),summarize, mean_up=round(mean(upload_kbps),1))
names(df.t) <- c("Operator","Month","Average Uploadspeed(Kbps)")
kable(df.t, caption="Average upload speed(Kbps) per operator per month")
library(plyr)
# add month
df.4G$month <- format(as.Date(df.4G$test_date, "%Y-%m-%d"), "%m")
df.t<-ddply(df.4G,.(operator,month),summarize, mean_dwn=round(mean(download_kbps),1))
names(df.t) <- c("Operator","Month","Average Download speed(Kbps)")
kable(df.t, caption="Average download speed(Kbps) per operator per month")
library(plyr)
# add month
df.4G$month <- format(as.Date(df.4G$test_date, "%Y-%m-%d"), "%m")
df.t<-ddply(df.4G,.(operator,month),summarize, mean_up=round(mean(upload_kbps),1))
names(df.t) <- c("Operator","Month","Average Uploadspeed(Kbps)")
kable(df.t, caption="Average upload speed(Kbps) per operator per month")
log(latency)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
library(ggplot)
library(ggplot2)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=6, size=6)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=6, size=8)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=6, size=8)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=6, size=10)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=6, size=14)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
latency
log
help(log)
boxplot
boxplot(df.4G)
help(boxplot)
help(ggplot)
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator))
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides;
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot(with=.5)
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot(outlier.size=1.5, outlier.shape=21, width=.5)
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
scale_x_continuous(breaks=null)
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
scale_x_continuous(breaks=NULL) +
theme(axis.title.x = element.blank())
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() + scale_x_continuous(breaks=NULL)
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
stat_summary(fun.y="mean",geom="point", shape=23, size=3)
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=23, size=4)
View(df.4G)
library(ggplot2)
library(ggplot2)
library(ggplot2)
ggplot(df.4G, aes(x=operator, y=latency, fill=operator)) +geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y="mean", geom="point", shape=23, size=4)
log(1000)
log(2000)
log(0)
log(8)
log(4000)
exp(8)
exp(8.07)
exp(8.079)
exp(8.079442)
log(4000)
exp(8.294)
ggplot(df.4G, aes(x=operator, y=latency, fill=operator)) +geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y="mean", geom="point", shape=23, size=4)
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) +geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y="mean", geom="point", shape=23, size=4)
exp(4)
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) +geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y="mean", geom="point", shape=23, size=4) +
scale_y_continuous(limits=c(0,max(log(latency)))
l
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) +geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y="mean", geom="point", shape=23, size=4) +
scale_y_continuous(limits=c(0,max(log(latency))))
max_latency_log <- max(df.4G$latency)
max_latency_log
max_latency_log < log(max_latency_log)
max_latency_log
max_latency <- max_latency_log
max_latency_log <- log(max_latency)
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) +geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y="mean", geom="point", shape=23, size=4) +
scale_y_continuous(limits=c(0,max_latency_log))
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) +geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y="mean", geom="point", shape=23, size=4) +
scale_y_continuous(limits=c(-2,max_latency_log))
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) +geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y="mean", geom="point", shape=23, size=4) +
scale_y_continuous(limits=c(-2,max_latency_log))
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) +geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y="mean", geom="point", shape=23, size=4) +
scale_y_continuous(limits=c(-12,max_latency_log))
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) +geom_boxplot() +
scale_y_continuous(limits=c(-12,max_latency_log))
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) +geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y="mean", geom="point", shape=23, size=4) +
scale_y_continuous(limits=c(0,max_latency_log))
# boxplot
max_latency <- max(df.4G$latency)
max_latency_log <- log(max_latency)
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=23, size=4) +
scale_y_continuous(limits=c(0,max_latency_log))
# boxplot
max_latency <- max(df.4G$latency)
max_latency_log <- log(max_latency)
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=23, size=4) +
scale_y_continuous(limits=c(0,max_latency_log))
getwd()
lstQuarterMonths <- c("January,February,March")
lstQuarterMonths[1]
lstQuarterMonths <- c("January","February","March")
lstQuarterMonths[1]
# set global settings
source("Global.r")
# set global settings
source("Global.R")
# set global settings
source("Global.R")
# set global settings
source("Global.R")
# set global settings
source("Global.R")
# set global chunk options
library(knitr)
opts_chunk$set(echo=FALSE, cache=TRUE, tidy=TRUE, warning=FALSE, message=FALSE, error=TRUE)
# load functions
source("statistical-analysis.R")
# set global settings
source("Global.R")
# set global settings
source("Global.R")
# set global chunk options
library(knitr)
opts_chunk$set(echo=FALSE, cache=TRUE, tidy=TRUE, warning=FALSE, message=FALSE, error=TRUE)
# load functions
source("statistical-analysis.R")
# postgreSQL
require("RPostgreSQL", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
# Establish connection to PoststgreSQL using RPostgreSQL
drv <- dbDriver("PostgreSQL")
# read data from 4Gdb
# Full version of connection setting
con <- dbConnect(drv, dbname=dbName,host=hostName,port=Portnumber,user=dbUserName,password=dbPassword )
# all data joined
df.ad <- dbReadTable(con, c("ookla_all_data"))
# disconnect
sink <- dbDisconnect(con)
library(knitr)
tbl <- addmargins(table(df.ad$os))
#kable(as.data.frame(cbind(tbl,100*prop.table(tbl))),col.names = c('count','percentage'), digits = 2,caption="Raw test data counts")
kable(as.data.frame(tbl),col.names = c('','Counts'), caption="Raw test data counts")
library(ggplot2)
# months
df.ad.jan <- df.ad[as.Date(df.ad$test_date) >= as.Date('2015-01-01') & as.Date(df.ad$test_date) < as.Date('2015-02-01'),]
df.ad.feb <- df.ad[as.Date(df.ad$test_date) >= as.Date('2015-02-01') & as.Date(df.ad$test_date) < as.Date('2015-03-01'),]
df.ad.mrt <- df.ad[as.Date(df.ad$test_date) >= as.Date('2015-03-01') & as.Date(df.ad$test_date) < as.Date('2015-04-01'),]
# plot grid
par(mfrow=c(3,1),mar=c(1,1,1,1),mai=c(0.1,1,0.1,0.1))
#Tabel voor maand 1
tbl <- table(df.ad.jan$device_id)
tbl <- sort(tbl[tbl>10]) # only keep > 10
nms <- rep("",dim(tbl))
barplot(tbl, names.arg = nms,main="January 2015",ylab="Number of tests",xlab="Unique devices")
tbl.oct <- tbl # TO DO aanpassen maand
#Tabel voor maand 2
tbl <- table(df.ad.feb$device_id)
tbl <- sort(tbl[tbl>10]) # only keep > 10
nms <- rep("",dim(tbl))
barplot(tbl, names.arg = nms,main="February 2015",ylab="Number of tests",xlab="Unique devices")
tbl.nov <- tbl
#Tabel voor maand 3
tbl <- table(df.ad.mrt$device_id)
tbl <- sort(tbl[tbl>10]) # only keep > 10
nms <- rep("",dim(tbl))
barplot(tbl, names.arg = nms,main="March 2015",ylab="Number of tests",xlab="Unique devices")
tbl.dec <- tbl
# max number of test to call a device suspicious
max_susp_dev = 30
# set global settings
source("Global.R")
# set global settings
source("Global.R")
# set global chunk options
library(knitr)
opts_chunk$set(echo=FALSE, cache=TRUE, tidy=TRUE, warning=FALSE, message=FALSE, error=TRUE)
# load functions
source("statistical-analysis.R")
# postgreSQL
require("RPostgreSQL", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
# Establish connection to PoststgreSQL using RPostgreSQL
drv <- dbDriver("PostgreSQL")
# read data from 4Gdb
# Full version of connection setting
con <- dbConnect(drv, dbname=dbName,host=hostName,port=Portnumber,user=dbUserName,password=dbPassword )
# all data joined
df.ad <- dbReadTable(con, c("ookla_all_data"))
# disconnect
sink <- dbDisconnect(con)
library(knitr)
tbl <- addmargins(table(df.ad$os))
#kable(as.data.frame(cbind(tbl,100*prop.table(tbl))),col.names = c('count','percentage'), digits = 2,caption="Raw test data counts")
kable(as.data.frame(tbl),col.names = c('','Counts'), caption="Raw test data counts")
getwd()
# set global settings
source("Global.R")
readPNG("./img/tm-coverage-q1-2015.png")
library(png)
library(grid)
img <- readPNG("./img/tm-coverage-q1-2015.png")
grid.raster(img)
library(png)
library(grid)
img <- readPNG("./img/tm-coverage-q1-2015.png")
grid.raster(img)
source("Global.R")
# set global chunk options
library(knitr)
opts_chunk$set(echo=FALSE, cache=TRUE, tidy=TRUE, warning=FALSE, message=FALSE, error=TRUE)
# load functions
source("statistical-analysis.R")
# postgreSQL
require("RPostgreSQL", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
# Establish connection to PoststgreSQL using RPostgreSQL
drv <- dbDriver("PostgreSQL")
# read data from 4Gdb
# Full version of connection setting
con <- dbConnect(drv, dbname=dbName,host=hostName,port=Portnumber,user=dbUserName,password=dbPassword )
# all data joined
df.ad <- dbReadTable(con, c("ookla_all_data"))
# disconnect
sink <- dbDisconnect(con)
library(knitr)
tbl <- addmargins(table(df.ad$os))
#kable(as.data.frame(cbind(tbl,100*prop.table(tbl))),col.names = c('count','percentage'), digits = 2,caption="Raw test data counts")
kable(as.data.frame(tbl),col.names = c('','Counts'), caption="Raw test data counts")
library(ggplot2)
# months
df.ad.jan <- df.ad[as.Date(df.ad$test_date) >= as.Date('2015-01-01') & as.Date(df.ad$test_date) < as.Date('2015-02-01'),]
df.ad.feb <- df.ad[as.Date(df.ad$test_date) >= as.Date('2015-02-01') & as.Date(df.ad$test_date) < as.Date('2015-03-01'),]
df.ad.mrt <- df.ad[as.Date(df.ad$test_date) >= as.Date('2015-03-01') & as.Date(df.ad$test_date) < as.Date('2015-04-01'),]
# plot grid
par(mfrow=c(3,1),mar=c(1,1,1,1),mai=c(0.1,1,0.1,0.1))
#Tabel voor maand 1
tbl <- table(df.ad.jan$device_id)
tbl <- sort(tbl[tbl>10]) # only keep > 10
nms <- rep("",dim(tbl))
barplot(tbl, names.arg = nms,main="January 2015",ylab="Number of tests",xlab="Unique devices")
tbl.oct <- tbl # TO DO aanpassen maand
#Tabel voor maand 2
tbl <- table(df.ad.feb$device_id)
tbl <- sort(tbl[tbl>10]) # only keep > 10
nms <- rep("",dim(tbl))
barplot(tbl, names.arg = nms,main="February 2015",ylab="Number of tests",xlab="Unique devices")
tbl.nov <- tbl
#Tabel voor maand 3
tbl <- table(df.ad.mrt$device_id)
tbl <- sort(tbl[tbl>10]) # only keep > 10
nms <- rep("",dim(tbl))
barplot(tbl, names.arg = nms,main="March 2015",ylab="Number of tests",xlab="Unique devices")
tbl.dec <- tbl
# max number of test to call a device suspicious
max_susp_dev = 30
# read data from 4Gdb
# Establish connection to PoststgreSQL using RPostgreSQL
drv <- dbDriver("PostgreSQL")
# Full version of connection setting
con <- dbConnect(drv, dbname=dbName,host=hostName,port=Portnumber,user=dbUserName,password=dbPassword )
# all data joined and cleaned for suspicious devices in SQL
df.clnd <- dbReadTable(con, c("ookla_all_data_clean"))
# get data for tm coverage area only
df.4G <- dbReadTable(con, c("datatm4gcoverage"))
# disconnect
sink <- dbDisconnect(con)
top10 <- head(sort(table(df.clnd$operator),decreasing = TRUE),n=10)
kable(as.data.frame(cbind(rownames(top10),top10),row.names = FALSE),col.names = c('Operator','Number of speedtests'),align=c("l","r"),caption="Most frequent operators")
# filter on top three operators only
ops <- c("T-Mobile NL","Vodafone NL","KPN NL")
df.clnd.t3 <- df.clnd[df.clnd$operator %in% ops,]
library(knitr)
tbl <- table(df.clnd.t3$technology)
kable(as.data.frame(cbind(tbl,100*prop.table(tbl))),col.names = c('Number of cases','Percentage'), digits = 2, caption="Technology used in tests")
# number of 4G tests to be used in document
n4g <- tbl["4G"]
library(knitr)
tbl <- table(df.clnd.t3$os,df.clnd.t3$operator)
# kable(as.data.frame(cbind(tbl,100*prop.table(tbl))),col.names = c('Number of cases','Percentage'), digits = 2,caption="Raw test data counts")
kable(tbl)
# combine coordinates in "lat-lon"
str.coord <- paste(df.4G$client_latitude,",",df.4G$client_longitude)
# top 10 most frequent locations
tbl <- head(sort(table(str.coord),decreasing = TRUE),n=15)
nms <- names(tbl)
df.tmp <- as.data.frame(cbind(nms,tbl))
names(df.tmp) <- c("Coordinates","Count")
kable(df.tmp, row.names = FALSE,align=c("l","r"))
coord <- names(sort(table(str.coord),decreasing = TRUE)[1])
n.test.at.coord <- sort(table(str.coord),decreasing = TRUE)[1]
# filter unkown location
df.unkwnloc <- df.4G[paste(df.4G$client_latitude,",",df.4G$client_longitude)==coord,]
# filter 52.0666-4.3209
coord <- "52.0666 , 4.3209"
df.dh <- df.4G[paste(df.4G$client_latitude,",",df.4G$client_longitude)==coord,]
# filter unkown location from 4G as we want only known locations
df.4G <- df.4G[setdiff(rownames(df.4G),rownames(df.dh)),]
# replace Dronten with UNKNOWN
df.unkwnloc$gm_naam <- "Unkown Location"
# filter unkown location from 4G as we want only known locations
df.4G <- df.4G[setdiff(rownames(df.4G),rownames(df.unkwnloc)),]
library(png)
library(grid)
img <- readPNG("./img/tm-coverage-q1-2015.png")
grid.raster(img)
tbl <- table(df.4G$operator)
mt <- addmargins(tbl)
pt <- c(as.numeric(prop.table(tbl)),1.0)
kable(as.data.frame(cbind(mt,100*pt)),col.names = c('Number of tests','percentage'), digits = 2,caption="Number of 4G speedtests in the selected coverage area.")
# count number of cases that exceed theoretical max speed
n.max.tm <- nrow(subset(df.4G, download_kbps>150000 & operator == "T-Mobile NL"))
n.max.vf <- nrow(subset(df.4G, download_kbps>225000 & operator == "Vodafone NL"))
n.max.kpn <-nrow(subset(df.4G, download_kbps>225000 & operator == "KPN NL"))
# create filters
rw.fltr.1 <- rownames(subset(df.4G, download_kbps>150000 & operator == "T-Mobile NL"))
rw.fltr.2 <- rownames(subset(df.4G, download_kbps>225000 & operator == "Vodafone NL"))
rw.fltr.3 <- rownames(subset(df.4G, download_kbps>225000 & operator == "KPN NL"))
# filter out these extremes
df.4G <- df.4G[setdiff(rownames(df.4G),rw.fltr.1),]
df.4G <- df.4G[setdiff(rownames(df.4G),rw.fltr.2),]
df.4G <- df.4G[setdiff(rownames(df.4G),rw.fltr.3),]
# create filters
rw.fltr.4 <- rownames(subset(df.4G, upload_kbps>50000 & operator == "T-Mobile NL"))
rw.fltr.5 <-rownames(subset(df.4G, upload_kbps>50000 & operator == "Vodafone NL"))
rw.fltr.6 <-rownames(subset(df.4G, upload_kbps>50000 & operator == "KPN NL"))
# filter out these extremes
df.4G <- df.4G[setdiff(rownames(df.4G),rw.fltr.4),]
df.4G <- df.4G[setdiff(rownames(df.4G),rw.fltr.5),]
df.4G <- df.4G[setdiff(rownames(df.4G),rw.fltr.6),]
library(ggplot2)
library(reshape2)
#Timeseries
counts <- table(df.4G$operator, df.4G$test_date)
# barplot(counts,
#   xlab="Dates", col=c("green","magenta","red"))
# legend("topright",
#        legend = rownames(counts),
#        fill = c("green","magenta","red"),
#        cex = 0.5)
df.cnts <- as.data.frame(counts)
names(df.cnts) <- c("operator","date","freq")
# Faceting is a good alternative:
ggplot(df.cnts, aes(x=date,y=freq)) + geom_bar(width=.5,stat="identity") +
facet_wrap(~ operator, nrow = 3) +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=6))
# table
tbl <- addmargins(table(df.4G$operator,paste(format(as.Date(df.4G$test_date, "%Y-%m-%d"), "%m"), format(as.Date(df.4G$test_date, "%Y-%m-%d"), "%B"))))
kable(tbl,caption="Counts per operator per month")
library(plyr)
# add month
df.4G$month <- format(as.Date(df.4G$test_date, "%Y-%m-%d"), "%m")
df.t<-ddply(df.4G,.(operator,month),summarize, mean_dwn=round(mean(download_kbps),1))
names(df.t) <- c("Operator","Month","Average Downloadspeed(Kbps)")
kable(df.t, caption="Average download speed(Kbps) per operator per month")
library(plyr)
# add month
df.4G$month <- format(as.Date(df.4G$test_date, "%Y-%m-%d"), "%B")
df.t<-ddply(df.4G,.(operator,month),summarize, mean_up=round(mean(upload_kbps),1))
names(df.t) <- c("Operator","Month","Average Uploadspeed(Kbps)")
kable(df.t, caption="Average upload speed(Kbps) per operator per month")
library(plyr)
# add month
df.4G$month <- format(as.Date(df.4G$test_date, "%Y-%m-%d"), "%B")
df.t<-ddply(df.4G,.(operator,month),summarize, mean_up=round(mean(latency),1))
names(df.t) <- c("Operator","Month","Average Latency(ms)")
kable(df.t, caption="Average latency(ms) per operator per month")
library(plyr)
cdf <- ddply(df.4G, "operator", summarise, download_kbps.mean=mean(download_kbps))
# With mean lines, using cdf from above
ggplot(df.4G, aes(x=download_kbps)) + geom_histogram( colour="black", fill="white", binwidth = 5000) +
facet_grid(operator ~ .) +
geom_vline(data=cdf, aes(xintercept=download_kbps.mean),
linetype="solid", size=1, colour="red")
library(plyr)
cdf <- ddply(df.4G, "operator", summarise, upload_kbps.mean=mean(upload_kbps))
# With mean lines, using cdf from above
ggplot(df.4G, aes(x=upload_kbps)) + geom_histogram( colour="black", fill="white", binwidth = 1000) +
facet_grid(operator ~ .) +
geom_vline(data=cdf, aes(xintercept=upload_kbps.mean),
linetype="solid", size=1, colour="red")
library(plyr)
cdf <- ddply(df.4G, "operator", summarise, latency.mean=mean(latency))
# With mean lines, using cdf from above
ggplot(df.4G, aes(x=log(latency))) + geom_histogram( colour="black", fill="white", binwidth = 0.1) +
facet_grid(operator ~ .)  +
geom_vline(data=cdf, aes(xintercept=log(latency.mean)),
linetype="solid", size=1, colour="red")
# boxplot
ggplot(df.4G, aes(x=operator, y=download_kbps, fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
qdwn <- ddply(df.4G,.(operator), function(x) round(quantile(x$download,c(.9,.95,.99))))
names(qdwn) <- c("operator","10%","5%","1%")
kable(qdwn, caption="Top percentiles average download speed(Kbps)")
# boxplot
ggplot(df.4G, aes(x=operator, y=upload_kbps, fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
qdwn <- ddply(df.4G,.(operator), function(x) round(quantile(x$upload,c(.9,.95,.99))))
names(qdwn) <- c("operator","10%","5%","1%")
kable(qdwn, caption="Top percentiles average upload speed(Kbps)")
# boxplot
ggplot(df.4G, aes(x=operator, y=log(latency), fill=operator)) + geom_boxplot() +
guides(fill=FALSE) + stat_summary(fun.y=mean, geom="point", shape=5, size=4)
conflevel <- 0.99
library(xtable)
# do test result use sourced function
df.tr.dwnload <- fn.ttest(df.4G,"download_kbps",conflevel)
df.tr.upload <- fn.ttest(df.4G,"upload_kbps",conflevel)
df.tr.latency <- fn.ttest(df.4G,"latency",conflevel)
# print test result
print(xtable(df.tr.dwnload,format = "pandoc" ,  caption = "Comparison of means for metric: download(kbps)",row.names=FALSE, booktabs=TRUE), size="\\footnotesize",include.rownames=FALSE,comment=FALSE)
print(xtable(df.tr.upload,format = "pandoc" ,  caption = "Comparison of means for metric: upload(kbps)",row.names=FALSE), size="\\footnotesize",include.rownames=FALSE,comment=FALSE)
print(xtable(df.tr.latency,format = "pandoc",  caption = "Comparison of means for metric: latency(ms)",row.names=FALSE), size="\\footnotesize",include.rownames=FALSE,comment=FALSE)
# sometimes R is a bit cumbersome...
d1 <- as.numeric(as.character(df.tr.dwnload["T-Mobile vs KPN","Diff(Kbps)"]))
r1 <- as.numeric(as.character(df.tr.dwnload["T-Mobile vs KPN","Rel(%)"]))
l1 <- min(as.numeric(as.character(df.tr.dwnload["T-Mobile vs KPN","Mean 1"])),as.numeric(as.character(df.tr.dwnload["T-Mobile vs KPN","Mean 2"])))
d2 <- as.numeric(as.character(df.tr.dwnload["T-Mobile vs Vodafone","Diff(Kbps)"]))
r2 <- as.numeric(as.character(df.tr.dwnload["T-Mobile vs Vodafone","Rel(%)"]))
l2 <- min(as.numeric(as.character(df.tr.dwnload["T-Mobile vs Vodafone","Mean 1"])),as.numeric(as.character(df.tr.dwnload["T-Mobile vs Vodafone","Mean 2"])))
# postgreSQL
require("RPostgreSQL", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
# Establish connection to PoststgreSQL using RPostgreSQL
drv <- dbDriver("PostgreSQL")
# Full version of connection setting
con <- dbConnect(drv, dbname=dbName,host=hostName,port=Portnumber,user=dbUserName,password=dbPassword )
# all data joined on top 20 gemeentes
res <- dbSendQuery(con, "SELECT gm_code,gm_naam,aantal_inwoners from top20layer")
df.top20 <- fetch(res, n = -1)
# disconnect
sink <- dbDisconnect(con)
# print table
kable(df.top20)
# Add unknown as seperate "gemeente"
df.top20.plus.unknown <- rbind(df.top20, c("---","Unkown Location", nrow(df.unkwnloc)))
# drop month from df.4G
df.4G$month <- NULL
# add data of unknown to df
df.4G.plus.hotspots <- rbind(df.4G,df.unkwnloc)
library(png)
library(grid)
img <- readPNG("./img/top20gemeentes.png")
grid.raster(img)
# run the analysis for each gemeente in the df.top20
out = NULL
for (i in  1:nrow(df.top20.plus.unknown)) {
#  out = c(out, knit_expand('analysis-per-gemeente.Rmd'))
out = c(out, knit_child('analysis-per-gemeente.Rmd'))
}
cat(paste(out, collapse = '\n'))
#cat(knit(text=unlist(paste(out, collapse = '\n')), quiet=TRUE))
